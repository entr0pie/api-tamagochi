swagger: "2.0"
info:
  title: Tamagochi API (Parent) 
  description: This documentation seeks the Parent routes on the Tamagochi project. All rights reserved to Universidade Positivo. See more information [here](https://github.com/entr0pie/api-tamagochi).
  version: 1.0.0
host: parent.tamagochi.up.br 
basePath: /
schemes:
  - http
    
tags:
  - name: Parent 
    description: Create a account, login and edit your profile. 
  
  - name: Child
    description: Manage your Childs.
  
  - name: Task
    description: Create, read, update and delete the Children tasks.

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /register:
    post:
      tags: 
        - Parent 
      summary: Register a new Parent
      description: 
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
      - name: Register Information 
        in: body
        description: JSON object with name, surname, email, password and gender.
        required: true
        schema:
            type: object
            properties:
                name:
                    type: string
                    example: Agostinho 
                surname:
                    type: string
                    example: Carrara
                email:
                    type: string
                    example: agostinho_carrara@gmail.com
                password:
                    type: string
                    example: florianinhomeuamor  
                gender:
                    type: string
                    enum: ['m', 'f', 'n']
                    example: m
      responses:
        204:
          description: Account created successfully.
        400:
          $ref: "#/definitions/MissingField"
        
        403:
          description: Account already registered. Returns a JSON object with the error.
          schema:
            type: object
            properties:
              error:
                type: string
            example:
                error: Account already registered

  /login:
    post:
      tags:
        - Parent 
      summary: Authenticate as a Parent
      description:
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: Credentials 
          in: body
          description: JSON object with email and password.
          required: true
          schema:
            type: object 
            properties:
                email:
                    type: string
                    example: agostinho_carrara@gmail.com
                password:
                    type: string
                    example: florianinhomeuamor

      responses:
        200:
          description: Login successfull. Returns a JSON with a \"access_token\" key, contaning the JWT.
          schema:
              type: object
              properties:
                  access_token:
                      type: string
              example:
                  access_token: JWT_TOKEN 
        400:
          $ref: "#/definitions/MissingField"
        
        403:
          description: Email or password incorrect. Returns a error message.
          schema:
              type: object 
              properties:
                  error:
                      type: string
              example:
                  error: Permission Denied
  
  /profile:
    get:
      security:
        - BearerAuth: []
      tags:
        - Parent
      summary: Retrieve the profile Information
      description:
      produces:
        - application/json

      responses:
        200:
          description: Successfully returned profile Information.
          schema:
            type: object
            properties:
              email:
                type: string
                example: "agostinho_carrara@gmail.com"
              name:
                type: string
                example: "Agostinho"
              surname:
                type: string
                example: "Carrara"
              gender:
                type: string
                example: "m"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"

  /profile/edit:
    put:
      security:
        - BearerAuth: []
      tags:
        - Parent
      summary: Edit any profile attribute (name, surname, email, gender)
      description:
      produces:
        - application/json
      
      parameters:
      - name: Updated Field(s)
        in: body
        description: JSON object with the modified fields. In the following example all the fields are modified, but you can send just the altered ones. 
        required: true
        schema:
            type: object
            properties:
                name:
                    type: string
                    example: Agostinho 
                surname:
                    type: string
                    example: Carrara
                email:
                    type: string
                    example: agostinho_carrara@gmail.com
                password:
                    type: string
                    example: florianinhomeuamor  
                gender:
                    type: string
                    enum: ['m', 'f', 'n']
                    example: m
      responses:
        204:
          description: Edited attribute successfully.
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"

  /profile/delete:
    delete:
      security:
        - BearerAuth: []
      tags:
        - Parent
      summary: Delete the Parent account 
      description: Delete the Parent account and all the childs attached to it. 
      produces:
        - application/json
      
      responses:
        204:
          description: Deleted accounts successfully.
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity" 

  /child/register:
    post:
      security:
        - BearerAuth: []
      tags: 
        - Child
      summary: Register a new Child
      description: 
      consumes:
        - application/json
      produces:
        - application/json
    
      parameters:  
        - name: Child Data 
          in: body
          description: JSON object with name, surname, and gender of the Child.
          required: true
          schema:
            type: object
            properties:
                
              name:
                  type: string
                  example: "Florianinho"
              surname:
                  type: string
                  example: "Cardoso"
              gender:
                  type: string
                  enum: ['m', 'f', 'n']
                  example: "m"
      responses:
        200:
          description: Child registered successfully.
          schema:
            type: object 
            properties:
              child_token:
                type: string
                example: 32_BYTES_TOKEN
        400:
          $ref: "#/definitions/MissingField"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"
  
  /child:
    get:
      security:
        - BearerAuth: []
      tags:
        - Child 
      summary: Return all Childs registered
      description: Return all Childs registered for a Parent.
      produces:
        - application/json

      responses:
        200:
          description: Successfully fetched all Childs.
          schema:
            type: array 
            properties:
              items:
                $ref: '#/definitions/Child' 

            example:
                - access_token: "0d114f0224d2893700483a1de3a01463fb984fb4b841f11d9076ee7bd5b370c6"
                  balance: 1560 
                  gender: "m"
                  name: "Florianinho"
                  surname: "Carrara"
                - access_token: "c33126d5da425f23fe4b5a7a9c89a86d7ecdd450f6bcbe4d16694da395ce6ff1"
                  balance: 99999
                  gender: "f"
                  name: "Dona"
                  surname: "NenÃª"
        
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"

  /child/{access_token}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Child 
      summary: Return Child's information based on the access_token
      description: 
      produces:
        - application/json
      
      parameters:
        - name: access_token
          in: path
          type: string
          required: true
          description: Access token for child

      responses:
        200:
          description: Retrieved child's information.
          schema:
            type: object 
            properties:
              access_token:
                type: string 
                example: "0d114f0224d2893700483a1de3a01463fb984fb4b841f11d9076ee7bd5b370c6"
              balance: 
                type: integer 
                example: 1560 
              gender:
                type: string 
                example: "m"
              name:
                type: string 
                example: "Florianinho"
              surname: 
                type: string
                surname: "Carrara"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        404:
          description: Child not found.
          schema:
            type: object
            properties:
              error:
                type: string
                example: Child not found
        422:
          $ref: "#/definitions/UnprocessableEntity"
  
  /child/edit/{access_token}:
    put:
      security:
        - BearerAuth: []
      tags:
        - Child
      summary: Edit any Child attribute (name, surname, gender)
      description:
      produces:
        - application/json
      
      parameters:
      - name: access_token
        in: path
        type: string
        required: true
        description: Access token for child

      - name: Updated Field(s)
        in: body
        description: JSON object with the modified fields. In the following example all the fields are modified, but you can send just the altered ones. 
        required: true
        schema:
            type: object
            properties:
                name:
                    type: string
                    example: Florianinho 
                surname:
                    type: string
                    example: Carrara
                gender:
                    type: string
                    enum: ['m', 'f', 'n']
                    example: m 
      
      responses:
        204:
          description: Edited attribute successfully.
        404:
          description: Child not found.
          schema:
            type: object
            properties:
              error:
                type: string
                example: Child not found
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"
  
  /child/delete/{access_token}: 
     delete:
      security:
        - BearerAuth: []
      tags:
        - Child
      summary: Delete a child 
      description:
      produces:
        - application/json
      
      parameters:
        - name: access_token
          in: path
          type: string
          required: true
          description: Access token for child
      
      responses:
        204:
          description: Deleted Child successfully.
        404:
          description: Child not found.
          schema:
            type: object
            properties:
              error:
                type: string
                example: Child not found
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"
  
  /task/register:
    post:
      security:
        - BearerAuth: []
      tags: 
        - Task

      summary: Create a new Task 
      description:
      produces:
        - application/json 
      responses:
        204:
          description: Task created successfully.
        400:
          $ref: "#/definitions/MissingField"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"

  /task:
    get:
      security: 
        - BearerAuth: []
      tags:
        - Task 

      summary: Get all Tasks available (for all Childs) 
      description: 
      produces:
        - application/json

      responses:
        200:
          description: Successfully fetched all Tasks.
          schema:
            type: array 
            properties:
              items:
                $ref: '#/definitions/Task' 

            example:
                - name: "Clean up your bedroom!" 
                  description: "Pick up all the clothes on the floor, Florianinho. Pai te dÃ¡ um chocolate depois."
                  period: 3
                  frequency: "all days" 
                  is_active: 1
                - name: "Wash the dishes" 
                  description: "Help Bebel, your little catarrento."
                  period: 2
                  frequency: "all days" 
                  is_active: 0 
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"

  /task/{id}:
    get:
      security: 
        - BearerAuth: []
      tags:
        - Task 

      summary: Get a Task by id 
      description: 
      produces:
        - application/json
      
      parameters:
        - name: id
          in: path
          type: integer 
          required: true
          description: id of the Task 
       
      responses:
        200:
          description: Operation successful. 
          schema:
            type: object 
            properties:
              name: 
                type: string 
                example: "Clean up your bedroom!" 
              description: 
                type: string 
                example: "Pick up all the clothes on the floor, Florianinho. Pai te dÃ¡ um chocolate depois."
              period: 
                type: integer 
                example: 3
              frequency: 
                type: string 
                example: "all days" 
              is_active:
                type: integer 
                example: 1
        404:
          description: Task not found. 
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Task not found"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"
 
  /task/edit/{id}:
    put:
      security: 
        - BearerAuth: []
      tags:
        - Task 

      summary: Update a Task by id
      description: 
      produces:
        - application/json
      
      parameters:
        - name: id
          in: path
          type: integer 
          required: true
          description: id of the Task 

      
      responses:
        204:
          description: Operation successful. 
        404:
          description: Task not found. 
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Task not found"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"
  
  /task/delete/{id}:
    delete:
      security: 
        - BearerAuth: []
      tags:
        - Task 

      summary: Delete a Task by id 
      description: 
      produces:
        - application/json
      
      parameters:
        - name: id
          in: path
          type: integer 
          required: true
          description: id of the Task 
      
      responses:
        204:
          description: Operation successful. 
        
        404:
          description: Task not found. 
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Task not found"
        401:
          $ref: "#/definitions/MissingAuthHeader"
        422:
          $ref: "#/definitions/UnprocessableEntity"

definitions:
  # 400:
  #   $ref: "#/definitions/MissingField"
  MissingField:
      description: One of the required fields was not sent. 
      schema:
        type: object
        properties:
          error:
            type: string 
            example: Missing Fields 
  
  # 401:
  #   $ref: "#/definitions/MissingAuthHeader"
  MissingAuthHeader:
      description: (Auth) The JWT token was not sent by the user on the Authorization header (eg. Bearer eyJhbGciOiJIUz ...). See [login](#/parent/post_parent_login) for more info 
      schema:
        type: object
        properties:
          msg:
            type: string
            example: Missing Authorization Header
  
  # 422:
  #   $ref: "#/definitions/UnprocessableEntity"
  UnprocessableEntity:
    description: (Auth) The server failed to verify the token signature.
    schema:
      type: object
      properties:
        msg:
          type: string
          example: Signature verification failed

  Child:
    type: object
    properties:
      access_token:
        type: string
      balance:
        type: integer
      gender:
        type: string
      name:
        type: string
      surname:
        type: string

  Task:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      period:
        type: integer
      frequency:
        type: string
      is_visible:
        type: integer
