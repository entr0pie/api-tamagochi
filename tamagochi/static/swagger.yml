swagger: "2.0"
info:
  title: Tamagochi API 
  description: API for the Tamagochi project. All rights reserved to Universidade Positivo. See more information [here](https://github.com/entr0pie/api-tamagochi).
  version: 1.0.0
host: localhost:5000
basePath: /
schemes:
  - http
    
tags:
  - name: parent
    description: Register Childs and create Tasks.
  
  - name: child
    description: Customize your Tamagochi, complete Tasks and play minigames!

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /parent/register:
    post:
      tags: 
        - parent
      summary: Register a new Parent
      description: 
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
      - name: Register Information 
        in: body
        description: JSON object with name, surname, email, password and gender.
        required: true
        schema:
            type: object
            properties:
                name:
                    type: string
                    example: Agostinho 
                surname:
                    type: string
                    example: Carrara
                email:
                    type: string
                    example: agostinho_carrara@gmail.com
                password:
                    type: string
                    example: florianinhomeuamor  
                gender:
                    type: string
                    enum: ['m', 'f', 'n']
                    example: m
      responses:
        403:
          description: Account already registered. Returns a JSON object with the error.
          schema:
            type: object
            properties:
              error:
                type: string
            example:
                error: Account already registered

        200:
          description: Account created successfully. Returns a JSON object with the status.
          schema:
            type: object 
            properties:
                status:
                    type: string
            example:
                status: registered
    
  /parent/login:
    post:
      tags:
        - parent
      summary: Authenticate as a Parent
      description:
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: Credentials 
          in: body
          description: JSON object with email and password.
          required: true
          schema:
            type: object 
            properties:
                email:
                    type: string
                    example: agostinho_carrara@gmail.com
                password:
                    type: string
                    example: florianinhomeuamor

      responses:
        200:
          description: Login successfull. Returns a JSON with a \"access_token\" key, contaning the JWT.
          schema:
              type: object
              properties:
                  access_token:
                      type: string
              example:
                  access_token: JWT_TOKEN 
        403:
          description: Email or password incorrect. Returns a error message.
          schema:
              type: object 
              properties:
                  error:
                      type: string
              example:
                  error: Permission Denied
  
  /parent/child:
    get:
      security:
        - BearerAuth: []
      tags:
        - parent
      summary: Returns all Childs registered
      description: Returns all Childs registered for a Parent
      produces:
        - application/json

      responses:
        200:
          description: Successfully fetched all Childs
          schema:
            type: array 
            properties:
              items:
                $ref: '#/definitions/Child' 

            example:
                - access_token: "0d114f0224d2893700483a1de3a01463fb984fb4b841f11d9076ee7bd5b370c6"
                  balance: 1560 
                  gender: "m"
                  name: "Florianinho"
                  surname: "Carrara"
                - access_token: "c33126d5da425f23fe4b5a7a9c89a86d7ecdd450f6bcbe4d16694da395ce6ff1"
                  balance: 99999
                  gender: "f"
                  name: "Dona"
                  surname: "Nenê"

  /parent/child/register:
    post:
      security:
        - BearerAuth: []
      tags: 
        - parent
      summary: Register a new Child
      description: 
      consumes:
        - application/json
      produces:
        - application/json
    
      parameters:  
        - name: Child Data 
          in: body
          description: JSON object with name, surname, and gender of the Child.
          required: true
          schema:
            type: object
            properties:
                
              name:
                  type: string
                  example: "Florianinho"
              surname:
                  type: string
                  example: "Cardoso"
              gender:
                  type: string
                  enum: ['m', 'f', 'n']
                  example: "m"
      responses:
        200:
          description: Child registered successfully.
          schema:
            type: object 
            properties:
              child_token:
                type: string
                example: 32_BYTES_TOKEN
  /task:
    get:
      security: 
        - BearerAuth: []
      tags:
        - parent

      summary: Get all Tasks available (for all Childs) 
      description: 
      produces:
        - application/json

      responses:
        200:
          description: Successfully fetched all Childs
          schema:
            type: array 
            properties:
              items:
                $ref: '#/definitions/Task' 

            example:
                - name: "Clean up your bedroom!" 
                  description: "Pick up all the clothes on the floor, Florianinho. Pai te dá um chocolate depois."
                  period: 3
                  frequency: "all days" 
                  is_active: 1
                - name: "Wash the dishes" 
                  description: "Help Bebel, your little catarrento."
                  period: 2
                  frequency: "all days" 
                  is_active: 0 

  /child/login:
    post:
      tags:
        - child
      summary: Login as Child
      description: Login as a Child with the access token provided by the Parent. Make sure to register the Child first. 
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: Access Token 
          in: body
          description: The 32 bytes access token of the Child.
          required: true
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: 32_BYTES_TOKEN
      responses:
        200:
          description: Child logged successfully.
          schema:
            type: object
            properties:
              jwt_token:
                type: string
                example: JSON_WEB_TOKEN

        403:
          description: Access token is not valid.
          schema:
            type: object
            properties:
              error:
                type: string
                example: Permission Denied

definitions:
  Child:
    type: object
    properties:
      access_token:
        type: string
      balance:
        type: integer
      gender:
        type: string
      name:
        type: string
      surname:
        type: string

  Task:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      period:
        type: integer
      frequency:
        type: string
      is_visible:
        type: integer
